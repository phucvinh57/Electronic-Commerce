// This is your Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_DATABASE_URL")
}

generator tsed {
  provider = "tsed-prisma"
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @unique
  firstName String
  lastName  String
  email     String
  phone     String?
  gender    Gender?
  birthday  DateTime?
  avatarUrl String?
  cartItems CartItem[]
  ratings   Rating[]
  orders    Order[]
}

model CartItem {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  user      User         @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId    String
  product   Product      @relation(fields: [productId], references: [id])
  productId String       @db.ObjectId
  quantity  Int          @default(1)
  color     String?
  size      ProductSize?
}

model Order {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  price         Float
  quantity      Int
  totalPrice    Int
  coverImageUrl String
  summary       String?
  createdAt     DateTime @default(now())
  product       Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId     String?  @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @db.ObjectId
}

model Rating {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  comment   String?
  star      Float
  user      User    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
}

model Product {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  summary       String?
  description   String
  imageUrls     String[]
  coverImageUrl String
  price         Float
  discount      Float?
  genders       Gender[]
  types         ProductType[]
  ratings       Rating[]
  createdAt     DateTime      @default(now())
  orders        Order[]
  cartItems     CartItem[]
}

model ProductType {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  size      ProductSize
  color     String
  quantity  Int
  product   Product     @relation(fields: [productId], references: [id])
  productId String      @db.ObjectId
}

enum ProductSize {
  S
  M
  L
  XL
  XXL
}
